{"ast":null,"code":"import { takeEvery } from \"@redux-saga/core/effects\";\nimport ShopActionType from \"./shops.types\";\nexport function* fetchCollectionsStartAsync() {\n  console.log(\"I am fired\");\n  const collectionRef = firestore.collection(\"collections\");\n  dispatch(fetchCollectionsStart());\n  collectionRef.get().then(snapshot => {\n    const collectionMap = convertCollectionsSnapshotToMap(snapshot);\n    dispatch(fetchCollectionsSuccess(collectionMap));\n  }).catch(error => dispatch(fetchCollectionsFailure(error.message)));\n}\nexport function* fetchCollectionsStart() {\n  yield takeEvery(ShopActionType.FETCH_COLLECTIONS_START, fetchCollectionsStartAsync);\n}","map":{"version":3,"sources":["/home/mark/workmine/React-Complete/React Projects/crwn-clothing/src/redux/shop/shop.sagas.js"],"names":["takeEvery","ShopActionType","fetchCollectionsStartAsync","console","log","collectionRef","firestore","collection","dispatch","fetchCollectionsStart","get","then","snapshot","collectionMap","convertCollectionsSnapshotToMap","fetchCollectionsSuccess","catch","error","fetchCollectionsFailure","message","FETCH_COLLECTIONS_START"],"mappings":"AAAA,SAASA,SAAT,QAA0B,0BAA1B;AACA,OAAOC,cAAP,MAA2B,eAA3B;AAEA,OAAO,UAAUC,0BAAV,GAAuC;AAC5CC,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AAEA,QAAMC,aAAa,GAAGC,SAAS,CAACC,UAAV,CAAqB,aAArB,CAAtB;AACAC,EAAAA,QAAQ,CAACC,qBAAqB,EAAtB,CAAR;AAEAJ,EAAAA,aAAa,CACVK,GADH,GAEGC,IAFH,CAESC,QAAD,IAAc;AAClB,UAAMC,aAAa,GAAGC,+BAA+B,CAACF,QAAD,CAArD;AACAJ,IAAAA,QAAQ,CAACO,uBAAuB,CAACF,aAAD,CAAxB,CAAR;AACD,GALH,EAMGG,KANH,CAMUC,KAAD,IAAWT,QAAQ,CAACU,uBAAuB,CAACD,KAAK,CAACE,OAAP,CAAxB,CAN5B;AAOD;AACD,OAAO,UAAUV,qBAAV,GAAkC;AACvC,QAAMT,SAAS,CACbC,cAAc,CAACmB,uBADF,EAEblB,0BAFa,CAAf;AAID","sourcesContent":["import { takeEvery } from \"@redux-saga/core/effects\";\nimport ShopActionType from \"./shops.types\";\n\nexport function* fetchCollectionsStartAsync() {\n  console.log(\"I am fired\");\n\n  const collectionRef = firestore.collection(\"collections\");\n  dispatch(fetchCollectionsStart());\n\n  collectionRef\n    .get()\n    .then((snapshot) => {\n      const collectionMap = convertCollectionsSnapshotToMap(snapshot);\n      dispatch(fetchCollectionsSuccess(collectionMap));\n    })\n    .catch((error) => dispatch(fetchCollectionsFailure(error.message)));\n}\nexport function* fetchCollectionsStart() {\n  yield takeEvery(\n    ShopActionType.FETCH_COLLECTIONS_START,\n    fetchCollectionsStartAsync\n  );\n}\n"]},"metadata":{},"sourceType":"module"}