{"ast":null,"code":"import { takeLatest, call, put, all } from \"@redux-saga/core/effects\";\nimport ShopActionType from \"./shops.types\";\nimport { firestore, convertCollectionsSnapshotToMap } from \"../../firebase/firebase.utils\";\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from \"./shop.actions\";\nexport function* fetchCollectionsStartAsync() {\n  try {\n    // get a reference to the collections collection\n    const collectionRef = firestore.collection(\"collections\"); // returns a promise when promise is resolve, we get snapshot that consist of a number of individual documents (snapshot.docs)\n    // each document, we can get the id as a separate property, and the rest of the data using the .data()\n\n    const snapshot = yield collectionRef.get();\n    console.log(\"ðŸš€ ~ file: shop.sagas.js ~ line 20 ~ function*fetchCollectionsStartAsync ~ snapshot\", snapshot.docs[0].data());\n    const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot);\n    yield put(fetchCollectionsSuccess(collectionsMap));\n  } catch (error) {\n    yield put(fetchCollectionsFailure(error.message));\n  }\n}\nexport function* fetchCollectionsStart() {\n  yield takeLatest(ShopActionType.FETCH_COLLECTIONS_START, fetchCollectionsStartAsync);\n}\nexport function* shopSagas() {\n  yield all([call(fetchCollectionsStart)]);\n}","map":{"version":3,"sources":["/home/mark/workmine/React-Complete/React Projects/crwn-clothing/src/redux/shop/shop.sagas.js"],"names":["takeLatest","call","put","all","ShopActionType","firestore","convertCollectionsSnapshotToMap","fetchCollectionsSuccess","fetchCollectionsFailure","fetchCollectionsStartAsync","collectionRef","collection","snapshot","get","console","log","docs","data","collectionsMap","error","message","fetchCollectionsStart","FETCH_COLLECTIONS_START","shopSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,GAAhC,QAA2C,0BAA3C;AACA,OAAOC,cAAP,MAA2B,eAA3B;AAEA,SACEC,SADF,EAEEC,+BAFF,QAGO,+BAHP;AAKA,SACEC,uBADF,EAEEC,uBAFF,QAGO,gBAHP;AAKA,OAAO,UAAUC,0BAAV,GAAuC;AAC5C,MAAI;AACF;AACA,UAAMC,aAAa,GAAGL,SAAS,CAACM,UAAV,CAAqB,aAArB,CAAtB,CAFE,CAGF;AACA;;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB;AACAC,IAAAA,OAAO,CAACC,GAAR,CACE,qFADF,EAEEH,QAAQ,CAACI,IAAT,CAAc,CAAd,EAAiBC,IAAjB,EAFF;AAKA,UAAMC,cAAc,GAAG,MAAMjB,IAAI,CAC/BK,+BAD+B,EAE/BM,QAF+B,CAAjC;AAIA,UAAMV,GAAG,CAACK,uBAAuB,CAACW,cAAD,CAAxB,CAAT;AACD,GAhBD,CAgBE,OAAOC,KAAP,EAAc;AACd,UAAMjB,GAAG,CAACM,uBAAuB,CAACW,KAAK,CAACC,OAAP,CAAxB,CAAT;AACD;AACF;AACD,OAAO,UAAUC,qBAAV,GAAkC;AACvC,QAAMrB,UAAU,CACdI,cAAc,CAACkB,uBADD,EAEdb,0BAFc,CAAhB;AAID;AAED,OAAO,UAAUc,SAAV,GAAsB;AAC3B,QAAMpB,GAAG,CAAC,CAACF,IAAI,CAACoB,qBAAD,CAAL,CAAD,CAAT;AACD","sourcesContent":["import { takeLatest, call, put, all } from \"@redux-saga/core/effects\";\nimport ShopActionType from \"./shops.types\";\n\nimport {\n  firestore,\n  convertCollectionsSnapshotToMap,\n} from \"../../firebase/firebase.utils\";\n\nimport {\n  fetchCollectionsSuccess,\n  fetchCollectionsFailure,\n} from \"./shop.actions\";\n\nexport function* fetchCollectionsStartAsync() {\n  try {\n    // get a reference to the collections collection\n    const collectionRef = firestore.collection(\"collections\");\n    // returns a promise when promise is resolve, we get snapshot that consist of a number of individual documents (snapshot.docs)\n    // each document, we can get the id as a separate property, and the rest of the data using the .data()\n    const snapshot = yield collectionRef.get();\n    console.log(\n      \"ðŸš€ ~ file: shop.sagas.js ~ line 20 ~ function*fetchCollectionsStartAsync ~ snapshot\",\n      snapshot.docs[0].data()\n    );\n\n    const collectionsMap = yield call(\n      convertCollectionsSnapshotToMap,\n      snapshot\n    );\n    yield put(fetchCollectionsSuccess(collectionsMap));\n  } catch (error) {\n    yield put(fetchCollectionsFailure(error.message));\n  }\n}\nexport function* fetchCollectionsStart() {\n  yield takeLatest(\n    ShopActionType.FETCH_COLLECTIONS_START,\n    fetchCollectionsStartAsync\n  );\n}\n\nexport function* shopSagas() {\n  yield all([call(fetchCollectionsStart)]);\n}\n"]},"metadata":{},"sourceType":"module"}